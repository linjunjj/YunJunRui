package com.linjun.yunjunrui.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.linjun.yunjunrui.model.Usermodel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AUTHOR_MODEL".
*/
public class UserModelDao extends AbstractDao<Usermodel, Long> {

    public static final String TABLENAME = "USERMODEL";

    /**
     * Properties of entity AuthorModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserEmail = new Property(3, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserTel = new Property(4, String.class, "userTel", false, "USER_TEL");
        public final static Property UserPassWorld = new Property(5, String.class, "userPassWorld", false, "USER_PASS_WORLD");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USERMODEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userId
                "'USER_NAME' TEXT," + // 2: userName
                "'USER_EMAIL' TEXT," + // 3: userEmail
                "'USER_TEL' TEXT," + // 4: userTel
                "'USER_PASS_WORLD' TEXT);"); // 5: userPassWorld
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USERMODEL'";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usermodel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }

        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(4, userEmail);
        }

        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(5, userTel);
        }

        String userPassWorld = entity.getUserPassWorld();
        if (userPassWorld != null) {
            stmt.bindString(6, userPassWorld);
        }
    }

    @Override
    protected void bindValues(SQLiteStatement stmt, Usermodel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }

        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(4, userEmail);
        }

        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(5, userTel);
        }

        String userPassWorld = entity.getUserPassWorld();
        if (userPassWorld != null) {
            stmt.bindString(6, userPassWorld);
        }
    }


    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usermodel readEntity(Cursor cursor, int offset) {
        Usermodel entity = new Usermodel( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userEmail
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userTel
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // userPassWorld
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usermodel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPassWorld(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usermodel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usermodel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usermodel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
